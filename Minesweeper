Minesweeper Class: package org.cis1200.minesweeper;

import javax.swing.*;
import java.util.Random;

import static org.cis1200.minesweeper.MinecraftMusic.playExplosionSound;

public class Minesweeper {
    private SweeperSquare[][] board;
    public boolean gameOver;

    private int rowDim = 16;

    private int colDim = 16;
    private int numMines = 40;
    private int numSafeLeft;

    // Constructor
    public Minesweeper() {
        reset();
    }

    public void reset() {
        board = new SweeperSquare[rowDim][colDim];
        gameOver = false;
        numSafeLeft = 216;
        initializeBoard();
        addMines();
        calculateNumNeighborMines();
    }

    public SweeperSquare[][] getBoard() {
        return board;
    }

    public boolean getGameStatus() {
        return gameOver;
    }

    public void initializeBoard() {
        for (int i = 0; i < rowDim; i++) {
            for (int j = 0; j < colDim; j++) {
                board[i][j] = new SweeperSquare(false, true, false, 0);
            }
        }
    }

    public void addMines() {
        Random random = new Random();
        int minesAdded = 0;
        while (minesAdded < numMines) {
            int row = random.nextInt(rowDim);
            int col = random.nextInt(colDim);
            if (!board[row][col].getMine()) {
                board[row][col].setMine(true);
                minesAdded++;
            }
        }
    }

    public void calculateNumNeighborMines() {
        for (int i = 0; i < rowDim; i++) {
            for (int j = 0; j < colDim; j++) {
                int numSurrMines = countHelper(i, j);
                board[i][j].setNumSurrMines(numSurrMines);
            }
        }
    }

    public int countHelper(int row, int col) {
        int count = 0;
        int[] shiftRowCoords = { -1, -1, -1, 0, 0, 1, 1, 1 };
        int[] shiftColCoords = { -1, 0, 1, -1, 1, -1, 0, 1 };
        for (int i = 0; i < 8; i++) {
            int newRow = row + shiftRowCoords[i];
            int newCol = col + shiftColCoords[i];
            if (newRow >= 0 && newRow < rowDim && newCol >= 0 && newCol < colDim) {
                if (board[newRow][newCol].getMine()) {
                    count++;
                }
            }
        }
        return count;
    }

    // Logic behind to left mouseclick actions
    public void showSquare(int row, int col) {
        SweeperSquare square = board[row][col];
        // Cell is already covered or flagged, do nothing
        if (!square.getCovered() || square.getFlagged()) {
            return;
        }
        square.setCovered(false);
        // Mine is revealed
        if (square.getMine()) {
            gameOver = true;
            playExplosionSound("files/MinecraftExplosion-2.wav");
        }
        // Covers case when the cell has no surrounding mines
        else {
            playExplosionSound("files/GrassBreak.wav");
            if (square.getNumSurrMines() == 0) {
                showEmptySquares(row, col);
            }
            numSafeLeft--;
            if (numSafeLeft == 0) {
                gameOver = true;
            }
        }
    }

    public void showEmptySquares(int row, int col) {
        int[] shiftRowCoords = { -1, -1, -1, 0, 0, 1, 1, 1 };
        int[] shiftColCoords = { -1, 0, 1, -1, 1, -1, 0, 1 };

        for (int i = 0; i < 8; i++) {
            int newRow = row + shiftRowCoords[i];
            int newCol = col + shiftColCoords[i];
            if (newRow >= 0 && newRow < rowDim && newCol >= 0 && newCol < colDim) {
                if (!board[newRow][newCol].getMine() && board[newRow][newCol].getCovered()) {
                    board[newRow][newCol].setCovered(false);
                    numSafeLeft--;
                    if (board[newRow][newCol].getNumSurrMines() == 0) {
                        showEmptySquares(newRow, newCol);
                    }
                }
            }
        }
    }
    // Base Case: Stops recursion
    // if (row < 0 || col < 0 || row >= rowDim || col >= colDim) {
    // return;
    // }
    // SweeperSquare square = board[row][col];
    // if (!square.getCovered() || square.getFlagged()) {
    // return;
    // }
    // Recursive Case: Reveals neighboring steps recursively
    // square.setCovered(false);
    // if (square.getNumSurrMines() == 0) {
    // for (int i = -1; i <= 1; i++) {
    // for (int j = -1; j <= 1; j++) {
    // int newRow = row + i;
    // int newCol = col + j;
    // if (newRow >= 0 && newRow < rowDim && newCol >= 0 && newCol < colDim) {
    // showEmptySquares(row + i, col + j);
    // }
    // }
    // }
    // }
    // }

    // Logic behind right mouseclick actions
    public void flagSquare(int row, int col) {
        SweeperSquare square = board[row][col];
        if (square.getCovered()) {
            square.setFlagged(!square.getFlagged());
            playExplosionSound("files/FlagPlace.wav");
        }
    }

    // Checks if user won after subsequent actions
    public boolean checkWin() {
        // Checks Unfinished cases
        for (int i = 0; i < rowDim; i++) {
            for (int j = 0; j < colDim; j++) {
                SweeperSquare square = board[i][j];
                // Square is a mine but isn't revealed, game not done
                if (square.getMine() && !square.getFlagged()) {
                    return false;
                }
                // Square isn't a mine but is covered, game not done
                if (!square.getMine() && square.getCovered()) {
                    return false;
                }
            }
        }
        return true;
    }

    public void printGameState() {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                System.out.print(board[i][j].getMine());
                System.out.print(board[i][j].getNumSurrMines());
                System.out.print(board[i][j].getCovered());
                System.out.print(" | ");
            }
            System.out.println("\n---------");
        }
    }

    public ImageIcon gameFinished() {
        if (gameOver) {
            if (checkWin()) {
                ImageIcon winIcon = new ImageIcon("files/WinText.png");
                return winIcon;
            } else {
                ImageIcon lossIcon = new ImageIcon("files/LossText.png");
                return lossIcon;
            }
        }
        return null;
    }

    /**
     * Main method run to start and run the game. Initializes the runnable game
     * class of your choosing and runs it. IMPORTANT: Do NOT delete! You MUST
     * include a main method in your final submission.
     */
    public static void main(String[] args) {
        // Set the game you want to run here
        Minesweeper ms = new Minesweeper();
        for (int i = 0; i < 16; i++) {
            for (int j = 0; j < 16; j++) {
                if (!ms.gameOver) {
                    ms.showSquare(i, j);
                    ms.flagSquare(i, j);
                    ms.printGameState();
                    System.out.println("xxxxxxxxxxxxxxxxxxxxx");
                }
            }
        }
    }
}
